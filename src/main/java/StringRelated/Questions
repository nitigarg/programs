âœ… Beginner Level
ðŸŸ¢ Basics & Manipulation

Reverse a String
â†’ Without using StringBuilder/StringBuffer.

Check if a String is Palindrome
â†’ Consider both with and without ignoring spaces and special characters.

Count vowels and consonants in a string

Remove all white spaces from a string

Check if two strings are anagrams
â†’ "listen" and "silent" are anagrams.

Toggle case of each character
â†’ "HeLLo" â†’ "hEllO"

Remove duplicate characters from a string
â†’ "banana" â†’ "ban"

Find duplicate characters in a string

Check if a string contains only digits or letters

Compare two strings without using .equals()

âœ… Intermediate Level
ðŸŸ¡ Patterns & Frequency

Find the first non-repeating character in a string

Find the most frequent character in a string

Sort characters in a string by frequency

Compress the string
â†’ "aaabbc" â†’ "a3b2c1"

Find longest substring without repeating characters
â†’ (Sliding window technique)

Check if one string is a rotation of another
â†’ "abcd" and "cdab" â†’ true

Check if a string is a valid palindrome after removing at most one character

Implement strstr() or indexOf()
â†’ Find the first occurrence of a substring.

Count and extract words from a string without using split()

Capitalize the first letter of each word
â†’ "hello world" â†’ "Hello World"

âœ… Advanced Level
ðŸ”´ String Algorithms & Optimization

Implement regular expression matching
â†’ With support for . and * (LeetCode hard)

Group anagrams together
â†’ From an array of strings.

Find the longest palindromic substring
â†’ Use expand-around-center or dynamic programming.

Minimum window substring containing all characters of another string

Zigzag conversion (LeetCode style problem)

KMP (Knuthâ€“Morrisâ€“Pratt) pattern matching algorithm

Rabin-Karp substring search

Edit distance (Levenshtein distance)

Implement a basic string calculator
â†’ e.g., "3 + 5 * 2" â†’ 13

Decode a string
â†’ "3[a2[c]]" â†’ "accaccacc"